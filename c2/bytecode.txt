new object - endnew
#new @ object endnew


{new x}  <=>  {new x:object = object}
[{(new (init ID:'x'))}]   <=>   [{(new (init ID:'x' (type (var ID:'object')) (exp (var ID:'object'))))}]

At ID:'x' I could ensure there's no name conflict.
Throughout the (type...) I can be TDOP type-checking
 - I do all the requisite symbol-table and method-lookups to determine the final type of the expression
 - the expression gets thrown away -- no types go into the bytecode!
 - just keep the type, which is... the same wonky tree it was in the old compiler
 - if we don't have an exp, we'll also need to get this type's default value
Throughout the (exp...) I can be TDOP type-checking
 - results in bytecode that evaluates to produce an object result
 - then we have bytecode to construct the object and assign this initial value
At the init's ')' I add the symbol to my local scope
 - it comes with the type, that old wonky tree thing
 - the exp bytecode is already in our block's synthesized attribute
 - add the bytecode to construct the object with the exp's value
 - the block's bytecode will be returned upwards when the block is done

new x object endnew

{new

-----
2k14-04-21

If we want to pass Expression (or any other object) as qi attributes, it can't
have a reference; it needs to be assignable.  Maybe that's ok, get rid of Log&,
pass in a Log* instead (so that the default assignment operator is ok).

Want exp_ to give back an Expression.  That way expblocks can get its cmdtext()
and its bytecode(), whereas statements can get whatever they want from it
(probably its type, maybe also its bytecode).


naaaaaaah another way to do things:  use spirit locals.  that's the "right way"
even though it's uuugly :)
 - nurrrrrrrr no we still need to assign to _val!

-----
2k14-04-26

SymbolTable owns its symbols (types) (should it!!???), so that it explicitly
deletes them on destruction.  Its copy constructor.... copies, go figure.

-----

RootType: <-, object members>
 - CAN be dup'd; needs to be to construct descendent (memory: parent) types :)

BasicType: <parent, parentName, my members>

SymbolTable member:  <name, BasicType(parent, parentName, my new members)>

The variable_t should ensure the var (and members) all exist as it is created.
Its type is not constructed, it is *found*; it already exists in the symbol
table!
