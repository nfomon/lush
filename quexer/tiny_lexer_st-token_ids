/* -*- C++ -*- vim: set syntax=cpp:
 * PURPOSE: File containing definition of token-identifier and
 *          a function that maps token identifiers to a string
 *          name.
 *
 * NOTE: This file has been created automatically by Quex.
 *       Visit quex.org for further info.
 *
 * DATE: Thu Apr 17 23:18:47 2014
 *
 * (C) 2005-2010 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY                                           */
#ifndef __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS_QUEX_TINY_LEXER_ST__QUEX_TOKEN__
#define __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS_QUEX_TINY_LEXER_ST__QUEX_TOKEN__

#ifndef __QUEX_OPTION_PLAIN_C
#   include<cstdio> 
#else
#   include<stdio.h> 
#endif

/* The token class definition file can only be included after 
 * the definition on TERMINATION and UNINITIALIZED.          
 * (fschaef 12y03m24d: "I do not rememember why I wrote this.")    */
#include "tiny_lexer_st-token"

const QUEX_TYPE_TOKEN_ID QUEX_TKN_AMP           = ((QUEX_TYPE_TOKEN_ID)10004);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_AMPEQUALS     = ((QUEX_TYPE_TOKEN_ID)10005);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_AND           = ((QUEX_TYPE_TOKEN_ID)10006);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_ARROW         = ((QUEX_TYPE_TOKEN_ID)10007);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_AT            = ((QUEX_TYPE_TOKEN_ID)10008);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_BREAK         = ((QUEX_TYPE_TOKEN_ID)10009);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_CARAT         = ((QUEX_TYPE_TOKEN_ID)10010);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_CARATEQUALS   = ((QUEX_TYPE_TOKEN_ID)10011);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_CASE          = ((QUEX_TYPE_TOKEN_ID)10012);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_COLON         = ((QUEX_TYPE_TOKEN_ID)10013);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_COMMA         = ((QUEX_TYPE_TOKEN_ID)10014);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_CONTINUE      = ((QUEX_TYPE_TOKEN_ID)10015);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_DEDENT        = ((QUEX_TYPE_TOKEN_ID)10000);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_DEFAULT       = ((QUEX_TYPE_TOKEN_ID)10016);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_DEL           = ((QUEX_TYPE_TOKEN_ID)10017);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_DOT           = ((QUEX_TYPE_TOKEN_ID)10018);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_DOUBLETILDE   = ((QUEX_TYPE_TOKEN_ID)10019);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_EACH          = ((QUEX_TYPE_TOKEN_ID)10020);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_ELIF          = ((QUEX_TYPE_TOKEN_ID)10021);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_ELSE          = ((QUEX_TYPE_TOKEN_ID)10022);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_EQ            = ((QUEX_TYPE_TOKEN_ID)10023);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_EQUALS        = ((QUEX_TYPE_TOKEN_ID)10024);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_EXIT          = ((QUEX_TYPE_TOKEN_ID)10025);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_FAIL          = ((QUEX_TYPE_TOKEN_ID)10026);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_FIXED         = ((QUEX_TYPE_TOKEN_ID)10027);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_GE            = ((QUEX_TYPE_TOKEN_ID)10028);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_GT            = ((QUEX_TYPE_TOKEN_ID)10029);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_ID            = ((QUEX_TYPE_TOKEN_ID)10030);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_IF            = ((QUEX_TYPE_TOKEN_ID)10031);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_IN            = ((QUEX_TYPE_TOKEN_ID)10032);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_INDENT        = ((QUEX_TYPE_TOKEN_ID)10001);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_INT           = ((QUEX_TYPE_TOKEN_ID)10033);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_ISVAR         = ((QUEX_TYPE_TOKEN_ID)10034);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_LABEL         = ((QUEX_TYPE_TOKEN_ID)10035);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_LBRACE        = ((QUEX_TYPE_TOKEN_ID)10036);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_LBRACKET      = ((QUEX_TYPE_TOKEN_ID)10037);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_LE            = ((QUEX_TYPE_TOKEN_ID)10038);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_LOOP          = ((QUEX_TYPE_TOKEN_ID)10039);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_LPAREN        = ((QUEX_TYPE_TOKEN_ID)10040);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_LT            = ((QUEX_TYPE_TOKEN_ID)10041);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_MINUS         = ((QUEX_TYPE_TOKEN_ID)10042);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_MINUSEQUALS   = ((QUEX_TYPE_TOKEN_ID)10043);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_NE            = ((QUEX_TYPE_TOKEN_ID)10044);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_NEW           = ((QUEX_TYPE_TOKEN_ID)10045);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_NEWL          = ((QUEX_TYPE_TOKEN_ID)10046);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_NODENT        = ((QUEX_TYPE_TOKEN_ID)10002);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_NOR           = ((QUEX_TYPE_TOKEN_ID)10047);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_NOT           = ((QUEX_TYPE_TOKEN_ID)10048);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_OR            = ((QUEX_TYPE_TOKEN_ID)10049);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_PERCENT       = ((QUEX_TYPE_TOKEN_ID)10050);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_PERCENTEQUALS = ((QUEX_TYPE_TOKEN_ID)10051);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_PIPE          = ((QUEX_TYPE_TOKEN_ID)10052);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_PIPEEQUALS    = ((QUEX_TYPE_TOKEN_ID)10053);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_PLUS          = ((QUEX_TYPE_TOKEN_ID)10054);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_PLUSEQUALS    = ((QUEX_TYPE_TOKEN_ID)10055);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_RBRACE        = ((QUEX_TYPE_TOKEN_ID)10056);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_RBRACKET      = ((QUEX_TYPE_TOKEN_ID)10057);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_REGEXP        = ((QUEX_TYPE_TOKEN_ID)10058);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_RENEW         = ((QUEX_TYPE_TOKEN_ID)10059);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_RETURN        = ((QUEX_TYPE_TOKEN_ID)10060);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_RPAREN        = ((QUEX_TYPE_TOKEN_ID)10061);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_SEMI          = ((QUEX_TYPE_TOKEN_ID)10062);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_SLASH         = ((QUEX_TYPE_TOKEN_ID)10063);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_SLASHEQUALS   = ((QUEX_TYPE_TOKEN_ID)10064);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_STAR          = ((QUEX_TYPE_TOKEN_ID)10065);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_STAREQUALS    = ((QUEX_TYPE_TOKEN_ID)10066);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_STR           = ((QUEX_TYPE_TOKEN_ID)10067);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_SWITCH        = ((QUEX_TYPE_TOKEN_ID)10068);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_TERMINATION   = ((QUEX_TYPE_TOKEN_ID)0);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_TILDE         = ((QUEX_TYPE_TOKEN_ID)10069);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_TILDEEQUALS   = ((QUEX_TYPE_TOKEN_ID)10070);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_TIMES         = ((QUEX_TYPE_TOKEN_ID)10071);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_TYPEOF        = ((QUEX_TYPE_TOKEN_ID)10072);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_UNINITIALIZED = ((QUEX_TYPE_TOKEN_ID)10003);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_USEROP        = ((QUEX_TYPE_TOKEN_ID)10073);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_VOID          = ((QUEX_TYPE_TOKEN_ID)10074);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_WHERE         = ((QUEX_TYPE_TOKEN_ID)10075);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_WHILE         = ((QUEX_TYPE_TOKEN_ID)10076);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_WS            = ((QUEX_TYPE_TOKEN_ID)10077);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_XNOR          = ((QUEX_TYPE_TOKEN_ID)10078);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_XOR           = ((QUEX_TYPE_TOKEN_ID)10079);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_YIELD         = ((QUEX_TYPE_TOKEN_ID)10080);


QUEX_NAMESPACE_TOKEN_OPEN
extern const char* QUEX_NAME_TOKEN(map_id_to_name)(const QUEX_TYPE_TOKEN_ID TokenID);
QUEX_NAMESPACE_TOKEN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS_QUEX_TINY_LEXER_ST__QUEX_TOKEN__ */
