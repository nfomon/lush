// Copyright (C) 2013 Michael Biggs.  See the COPYING file at the top-level
// directory of this distribution and at http://shok.io/code/copyright.html

#include "CodeState.h"

#include "CompileError.h"
#include "util/Log.h"

#include "llvm/Analysis/Verifier.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/Module.h"
#include "llvm/Support/TargetSelect.h"

using namespace compiler;
using namespace llvm;

/* public */

CodeState::CodeState(Log& log)
  : m_log(log) {
  llvm::InitializeNativeTarget();

  LLVMContext& context = getGlobalContext();

  // Main module that holds all the code
  m_module = new Module("main", context);

  // Create the JIT; takes ownership of the module
  std::string err_str;
  m_engine.reset(EngineBuilder(m_module).setErrorStr(&err_str).create());
  if (!m_engine.get()) {
    throw CompileError("Failed to create LLVM ExecutionEngine: " + err_str);
  }

  // Optimizer pipeline
  m_fpm.reset(new llvm::FunctionPassManager(m_module));
  // Info about how the target lays out data structures
  //m_fpm->add(new llvm::DataLayout(*m_engine->getDataLayout()));
  // Provides basic AliasAnalysis support for GVN(?)
  //m_fpm->add(llvm::createBasicAliasAnalysisPass());
  // Promote allocas to registers
  //m_fpm->add(llvm::createPromoteMemoryToRegisterPass());
  // Do simple "peephole" optimizations and bit-twiddling
  //m_fpm->add(llvm::createInstructionCombiningPass());
  // Reassociate expressions
  //m_fpm->add(llvm::createReassociatePass());
  // Eliminate common subexpressions
  //m_fpm->add(llvm::createGVNPass());
  // Simplify the control flow graph (unreachable blocks, etc.)
  //m_fpm->add(llvm::createCFGSimplificationPass());

  m_fpm->doInitialization();

  m_builder.reset(new IRBuilder<>(context));
}
