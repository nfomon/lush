new x
member y object



input:

new x : animal = cat*mouse

becomes:

new x   # <NULL>
call x cat operator* mouse


input:

new x = moo

new x           # <NULL>
assign x moo    # look up moo, clone the object on the heap, assign to x


input:

new x = cat*mouse+fish

(new x (call plus (call operator* cat mouse) fish))


(new x
 (member q)
 (member y
  (member z object)
 )
)

NO, ObjectLiterals have members, a New just has a name and an Expression value.
When we run the New, it runs the Expression which gives us an Object* that we
assign to the New's new name in our symbol table.


what does the vm do?
new: create a New struct that has
 - name
 - Expression

Let's have an Exp parser:
  x | (call x method args...)


-----
2k14-04-29
Symbols and calls

code:
  new x = @() {
    new moo
  }

  new y = @() {
    new lala
    x()
  }

  x()
  y()

bytecode:

(new x (func (new moo) ))
  => creates Object x with value (Object result of (func (new moo)))
(new y (func (new lala) (call x)))
  => creates Object y with value (Object result of (func (new lala) (call x)))
(call x)
  => Creates a StackFrame with code ptr set to x's first statement; calls the StackFrame
    -> the "new moo" is added to the StackFrame's own locals map
  -> StackFrame is destroyed
(call y)
  => copies the body of y into a StackFrame, calls the StackFrame
    -> the "new lala" is added to the StackFrame's own locals map
    -> "call x":
      => we *knew* which x that referred to, so no problem there
      => copies the body of x into a StackFrame, calls the StackFrame
        -> the "new moo" is added to the StackFrame's own locals map

There's something different about bare code (at any depth) vs. the temporary
locals that are constructed by a function-call's stack frame.  When we're
compiling bare code, the varname:scopedepth gives us a unique identifier that
we can give to the VM to put in the global symbol table.

As for the locals, just refer to them by their local name.

When we get to 'self', the compiler will know to create that as a special
member of the methods, and give special names to the self.vars to allow for the
lookups through self.  Or something like that.
